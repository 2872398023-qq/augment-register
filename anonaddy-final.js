// ==UserScript==
// @name        Augment ÂÖ®Ëá™Âä®Ê≥®ÂÜå - ÂÆåÂÖ®Ëá™Âä®ÂåñÁâàÊú¨
// @namespace   augment-auto-complete
// @version     7.0
// @description ‰∏ÄÈîÆÂÆåÊàêAugmentÂÆòÁΩëËá™Âä®Ê≥®ÂÜåÊµÅÁ®ãÔºåÊó†ÈúÄ‰∫∫Â∑•Âπ≤È¢Ñ
// @author      Zk
// @match       https://augmentcode.com/*
// @match       https://www.augmentcode.com/*
// @match       https://login.augmentcode.com/*
// @match       https://*.augmentcode.com/*
// @grant       GM_xmlhttpRequest
// @grant       GM_addStyle
// @grant       GM_setValue
// @grant       GM_getValue
// @grant       GM_log
// @connect     augment-register.vercel.app
// @connect     your-project.vercel.app
// ==/UserScript==

(() => {
  "use strict";

  /* ======== Áîü‰∫ßÈÖçÁΩÆ ======== */
  // üîß ËØ∑Ê†πÊçÆÊÇ®ÁöÑÈÉ®ÁΩ≤ÊÉÖÂÜµ‰øÆÊîπ‰ª•‰∏ãÈÖçÁΩÆ
  const API_URL = "https://augment-register.vercel.app/api/code"; // ‰øÆÊîπ‰∏∫ÊÇ®ÁöÑ Vercel ÈÉ®ÁΩ≤Âú∞ÂùÄ
  const DOMAIN = "zkllk.anonaddy.com"; // ‰øÆÊîπ‰∏∫ÊÇ®ÁöÑ AnonAddy ÂüüÂêç

  // Ëá™Âä®ÂåñÈÖçÁΩÆ
  const AUTO_START_DELAY = 5000; // È°µÈù¢Âä†ËΩΩÂêéËá™Âä®ÂºÄÂßãÂª∂ËøüÔºàÊØ´ÁßíÔºâ
  const MAX_RETRY_ATTEMPTS = 5; // È™åËØÅÁ†ÅËé∑ÂèñÊúÄÂ§ßÈáçËØïÊ¨°Êï∞
  const RETRY_INTERVAL = 3000; // ÈáçËØïÈó¥ÈöîÔºàÊØ´ÁßíÔºâ
  const PAGE_TRANSITION_WAIT = 3000; // È°µÈù¢Ë∑≥ËΩ¨Á≠âÂæÖÊó∂Èó¥
  const CODE_FETCH_DELAY = 5000; // È™åËØÅÁ†ÅËé∑ÂèñÂâçÁ≠âÂæÖÊó∂Èó¥
  const ELEMENT_WAIT_TIMEOUT = 10000; // ÂÖÉÁ¥†Á≠âÂæÖË∂ÖÊó∂Êó∂Èó¥
  /* ======================== */

  // ÂÖ®Â±ÄÂèòÈáè
  let currentEmail = "";
  let isProcessing = false;
  let statusPanel = null;
  let autoMode = true; // Ëá™Âä®Ê®°ÂºèÂºÄÂÖ≥

  /* ---- ÈÄöÁî®Â∑•ÂÖ∑ ---- */
  const sleep = (ms) => new Promise((r) => setTimeout(r, ms));
  const randStr = () => Math.random().toString(36).slice(2, 10);

  // Êó•ÂøóÂ∑•ÂÖ∑
  const log = (message, type = "info") => {
    const timestamp = new Date().toLocaleTimeString();
    const prefix = type === "error" ? "‚ùå" : type === "success" ? "‚úÖ" : "‚ÑπÔ∏è";
    console.log(`[${timestamp}] ${prefix} ${message}`);
    updateStatus(prefix, message, type);
  };

  // Ë∞ÉËØïÊó•Âøó
  const debugLog = (message, type = "info") => {
    console.log(`[DEBUG] ${message}`);
  };

  /* ---- Â¢ûÂº∫ÁöÑ DOM ÈÄâÊã©Âô® ---- */
  const $ = {
    // ÈÇÆÁÆ±ËæìÂÖ•Ê°Ü - Êõ¥ÂÖ®Èù¢ÁöÑÈÄâÊã©Âô®
    email: () =>
      document.querySelector('input[name="username"]') ||
      document.querySelector('input[name="email"]') ||
      document.querySelector('input[id="email"]') ||
      document.querySelector('input[type="email"]') ||
      document.querySelector('input[inputmode="email"]') ||
      document.querySelector('input[placeholder*="email" i]') ||
      document.querySelector('input[placeholder*="ÈÇÆÁÆ±"]') ||
      document.querySelector('input[placeholder*="Email"]') ||
      document.querySelector('input[autocomplete="email"]'),

    // È™åËØÅÁ†ÅËæìÂÖ•Ê°Ü - Êõ¥Á≤æÁ°ÆÁöÑÂåπÈÖç
    code: () =>
      document.querySelector('input[name="code"]') ||
      document.querySelector('input[name="otp"]') ||
      document.querySelector('input[name="verification_code"]') ||
      document.querySelector('input[name="verificationCode"]') ||
      document.querySelector('input[type="number"]') ||
      document.querySelector('input[maxlength="6"]') ||
      document.querySelector('input[placeholder*="È™åËØÅÁ†Å" i]') ||
      document.querySelector('input[placeholder*="code" i]') ||
      document.querySelector('input[placeholder*="verification" i]') ||
      document.querySelector('input[autocomplete="one-time-code"]'),

    // Êèê‰∫§ÊåâÈíÆ - Êô∫ËÉΩËØÜÂà´
    submitBtn: () => {
      // ‰ºòÂÖàÊü•ÊâæÊòéÁ°ÆÁöÑÊèê‰∫§ÊåâÈíÆ
      let btn =
        document.querySelector('button[type="submit"]') ||
        document.querySelector('input[type="submit"]');

      if (btn) return btn;

      // Êü•ÊâæÂåÖÂê´ÁâπÂÆöÊñáÊú¨ÁöÑÊåâÈíÆ
      const buttons = Array.from(document.querySelectorAll("button"));
      return buttons.find((b) => {
        const text = b.textContent.trim().toLowerCase();
        return (
          text.includes("continue") ||
          text.includes("next") ||
          text.includes("submit") ||
          text.includes("verify") ||
          text.includes("confirm") ||
          text.includes("ÁªßÁª≠") ||
          text.includes("‰∏ã‰∏ÄÊ≠•") ||
          text.includes("Êèê‰∫§") ||
          text.includes("È™åËØÅ") ||
          text.includes("Á°ÆËÆ§")
        );
      });
    },

    // ÊúçÂä°Êù°Ê¨æÂ§çÈÄâÊ°Ü
    agree: () =>
      document.querySelector('input[type="checkbox"]') ||
      document.querySelector('input[name*="agree" i]') ||
      document.querySelector('input[name*="terms" i]') ||
      document.querySelector('input[id*="terms"]') ||
      document.querySelector('input[id*="agree"]'),
  };

  /* ---- Êô∫ËÉΩÁ≠âÂæÖÂÖÉÁ¥† ---- */
  const waitForElement = (selector, timeout = ELEMENT_WAIT_TIMEOUT) => {
    return new Promise((resolve) => {
      // Á´ãÂç≥Ê£ÄÊü•
      const element =
        typeof selector === "function"
          ? selector()
          : document.querySelector(selector);
      if (element) {
        resolve(element);
        return;
      }

      let timeoutId;
      const observer = new MutationObserver(() => {
        const element =
          typeof selector === "function"
            ? selector()
            : document.querySelector(selector);
        if (element) {
          clearTimeout(timeoutId);
          observer.disconnect();
          resolve(element);
        }
      });

      observer.observe(document.body, {
        childList: true,
        subtree: true,
        attributes: true,
      });

      timeoutId = setTimeout(() => {
        observer.disconnect();
        resolve(null);
      }, timeout);
    });
  };

  /* ---- È™åËØÅÁ†ÅËé∑Âèñ ---- */
  const fetchVerificationCode = async (email) => {
    return new Promise((resolve, reject) => {
      GM_xmlhttpRequest({
        method: "POST",
        url: API_URL,
        headers: {
          "Content-Type": "application/json",
        },
        data: JSON.stringify({ email }),
        timeout: 30000,
        onload: (response) => {
          try {
            const data = JSON.parse(response.responseText);
            if (data.success && data.code) {
              log(`ÊàêÂäüËé∑ÂèñÈ™åËØÅÁ†Å: ${data.code}`, "success");
              resolve(data.code);
            } else {
              reject(new Error(data.message || "Ëé∑ÂèñÈ™åËØÅÁ†ÅÂ§±Ë¥•"));
            }
          } catch (error) {
            reject(new Error("Ëß£ÊûêAPIÂìçÂ∫îÂ§±Ë¥•"));
          }
        },
        onerror: () => reject(new Error("ÁΩëÁªúËØ∑Ê±ÇÂ§±Ë¥•")),
        ontimeout: () => reject(new Error("ËØ∑Ê±ÇË∂ÖÊó∂")),
      });
    });
  };

  /* ---- ÈÇÆÁÆ±ÁîüÊàê ---- */
  const generateEmail = () => {
    const randomPart = randStr();
    return `augment-${randomPart}@${DOMAIN}`;
  };

  /* ---- Áä∂ÊÄÅÈù¢ÊùøUI ---- */
  const createStatusPanel = () => {
    if (statusPanel) return;

    // Ê∑ªÂä†Ê†∑Âºè
    GM_addStyle(`
      #augment-auto-panel {
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 350px;
        background: rgba(255, 255, 255, 0.98);
        border-radius: 12px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
        z-index: 10000;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.3);
        overflow: hidden;
      }
      
      .auto-panel-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 15px;
        font-weight: 600;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }
      
      .auto-panel-content {
        padding: 15px;
      }
      
      .auto-status-item {
        margin: 10px 0;
        padding: 10px;
        border-radius: 8px;
        font-size: 14px;
        line-height: 1.4;
        display: flex;
        align-items: center;
        gap: 8px;
      }
      
      .auto-status-success { background: #d4edda; color: #155724; }
      .auto-status-error { background: #f8d7da; color: #721c24; }
      .auto-status-info { background: #d1ecf1; color: #0c5460; }
      .auto-status-warning { background: #fff3cd; color: #856404; }
      
      .auto-email-display {
        background: #f8f9fa;
        padding: 12px;
        border-radius: 8px;
        font-family: monospace;
        font-size: 12px;
        word-break: break-all;
        margin: 10px 0;
        border: 1px solid #e9ecef;
      }
      
      .auto-progress-bar {
        width: 100%;
        height: 6px;
        background: #e9ecef;
        border-radius: 3px;
        overflow: hidden;
        margin: 10px 0;
      }
      
      .auto-progress-fill {
        height: 100%;
        background: linear-gradient(90deg, #667eea, #764ba2);
        border-radius: 3px;
        transition: width 0.3s ease;
      }
      
      .auto-action-buttons {
        display: flex;
        gap: 8px;
        margin-top: 15px;
      }
      
      .auto-btn {
        flex: 1;
        padding: 10px 12px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-size: 13px;
        font-weight: 500;
        transition: all 0.2s;
      }
      
      .auto-btn-primary {
        background: #007bff;
        color: white;
      }
      
      .auto-btn-primary:hover {
        background: #0056b3;
      }
      
      .auto-btn-primary:disabled {
        background: #6c757d;
        cursor: not-allowed;
      }
      
      .auto-btn-secondary {
        background: #6c757d;
        color: white;
      }
      
      .auto-btn-secondary:hover {
        background: #545b62;
      }
      
      .auto-minimize-btn {
        background: none;
        border: none;
        color: white;
        cursor: pointer;
        font-size: 16px;
        padding: 0;
        width: 24px;
        height: 24px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      
      .auto-minimize-btn:hover {
        background: rgba(255, 255, 255, 0.2);
      }
      
      .auto-panel-minimized .auto-panel-content {
        display: none;
      }
      
      .auto-mode-toggle {
        display: flex;
        align-items: center;
        gap: 8px;
        margin: 10px 0;
        padding: 8px;
        background: #f8f9fa;
        border-radius: 6px;
        font-size: 12px;
      }
      
      .auto-toggle-switch {
        position: relative;
        width: 40px;
        height: 20px;
        background: #ccc;
        border-radius: 10px;
        cursor: pointer;
        transition: background 0.3s;
      }
      
      .auto-toggle-switch.active {
        background: #007bff;
      }
      
      .auto-toggle-slider {
        position: absolute;
        top: 2px;
        left: 2px;
        width: 16px;
        height: 16px;
        background: white;
        border-radius: 50%;
        transition: transform 0.3s;
      }
      
      .auto-toggle-switch.active .auto-toggle-slider {
        transform: translateX(20px);
      }
    `);

    // ÂàõÂª∫Èù¢ÊùøHTML
    statusPanel = document.createElement("div");
    statusPanel.id = "augment-auto-panel";
    statusPanel.innerHTML = `
      <div class="auto-panel-header">
        <span>üöÄ Augment ÂÖ®Ëá™Âä®Ê≥®ÂÜå</span>
        <button class="auto-minimize-btn" onclick="this.closest('#augment-auto-panel').classList.toggle('auto-panel-minimized')">‚àí</button>
      </div>
      <div class="auto-panel-content">
        <div class="auto-mode-toggle">
          <span>Ëá™Âä®Ê®°Âºè:</span>
          <div class="auto-toggle-switch ${
            autoMode ? "active" : ""
          }" id="auto-mode-toggle">
            <div class="auto-toggle-slider"></div>
          </div>
          <span id="auto-mode-text">${autoMode ? "ÂºÄÂêØ" : "ÂÖ≥Èó≠"}</span>
        </div>
        
        <div id="auto-status-display" class="auto-status-item auto-status-info">
          ‚ÑπÔ∏è ÂáÜÂ§áÂ∞±Áª™ÔºåÁ≠âÂæÖÂºÄÂßã...
        </div>
        
        <div class="auto-progress-bar">
          <div class="auto-progress-fill" id="auto-progress-fill" style="width: 0%"></div>
        </div>
        
        <div id="auto-email-display" class="auto-email-display">
          ÈÇÆÁÆ±Âú∞ÂùÄ: Á≠âÂæÖÁîüÊàê...
        </div>
        
        <div class="auto-action-buttons">
          <button id="auto-start-btn" class="auto-btn auto-btn-primary">ÂºÄÂßãÊ≥®ÂÜå</button>
          <button id="auto-retry-btn" class="auto-btn auto-btn-secondary" style="display: none;">ÈáçËØï</button>
        </div>
      </div>
    `;

    document.body.appendChild(statusPanel);

    // ÁªëÂÆö‰∫ã‰ª∂
    document
      .getElementById("auto-start-btn")
      .addEventListener("click", startAutoRegistration);
    document.getElementById("auto-retry-btn").addEventListener("click", () => {
      document.getElementById("auto-retry-btn").style.display = "none";
      startAutoRegistration();
    });

    // Ëá™Âä®Ê®°ÂºèÂàáÊç¢
    document
      .getElementById("auto-mode-toggle")
      .addEventListener("click", () => {
        autoMode = !autoMode;
        const toggle = document.getElementById("auto-mode-toggle");
        const text = document.getElementById("auto-mode-text");

        if (autoMode) {
          toggle.classList.add("active");
          text.textContent = "ÂºÄÂêØ";
        } else {
          toggle.classList.remove("active");
          text.textContent = "ÂÖ≥Èó≠";
        }
      });
  };

  // Êõ¥Êñ∞Áä∂ÊÄÅÊòæÁ§∫
  const updateStatus = (icon, message, type = "info") => {
    const statusDisplay = document.getElementById("auto-status-display");
    if (statusDisplay) {
      statusDisplay.className = `auto-status-item auto-status-${type}`;
      statusDisplay.innerHTML = `${icon} ${message}`;
    }
  };

  // Êõ¥Êñ∞ÈÇÆÁÆ±ÊòæÁ§∫
  const updateEmailDisplay = (email) => {
    const emailDisplay = document.getElementById("auto-email-display");
    if (emailDisplay) {
      emailDisplay.innerHTML = `ÈÇÆÁÆ±Âú∞ÂùÄ: <strong>${email}</strong>`;
    }
  };

  // Êõ¥Êñ∞ËøõÂ∫¶Êù°
  const updateProgress = (percentage) => {
    const progressFill = document.getElementById("auto-progress-fill");
    if (progressFill) {
      progressFill.style.width = `${percentage}%`;
    }
  };

  // ÊòæÁ§∫ÈáçËØïÊåâÈíÆ
  const showRetryButton = () => {
    const retryBtn = document.getElementById("auto-retry-btn");
    const startBtn = document.getElementById("auto-start-btn");
    if (retryBtn && startBtn) {
      retryBtn.style.display = "block";
      startBtn.disabled = false;
      startBtn.textContent = "ÂºÄÂßãÊ≥®ÂÜå";
    }
  };

  /* ---- Ê†∏ÂøÉËá™Âä®ÂåñÊµÅÁ®ã ---- */

  // Ê≠•È™§1: Ëá™Âä®Â°´ÂÜôÈÇÆÁÆ±
  const autoFillEmail = async () => {
    try {
      log("üîç Êü•ÊâæÈÇÆÁÆ±ËæìÂÖ•Ê°Ü...", "info");
      updateProgress(10);

      const emailInput = await waitForElement($.email, ELEMENT_WAIT_TIMEOUT);
      if (!emailInput) {
        throw new Error("Êú™ÊâæÂà∞ÈÇÆÁÆ±ËæìÂÖ•Ê°Ü");
      }

      log("üìß ÊâæÂà∞ÈÇÆÁÆ±ËæìÂÖ•Ê°ÜÔºåÂºÄÂßãÂ°´ÂÜô...", "success");
      debugLog(
        `ÈÇÆÁÆ±ËæìÂÖ•Ê°ÜÂ±ûÊÄß: name="${emailInput.name}", type="${emailInput.type}", placeholder="${emailInput.placeholder}"`
      );

      // Ê∏ÖÁ©∫Âπ∂Â°´ÂÜôÈÇÆÁÆ±
      emailInput.value = "";
      emailInput.focus();
      await sleep(500);

      // Ê®°ÊãüÁúüÂÆûËæìÂÖ•
      for (let i = 0; i < currentEmail.length; i++) {
        emailInput.value += currentEmail[i];
        emailInput.dispatchEvent(new Event("input", { bubbles: true }));
        await sleep(50); // Ê®°ÊãüÊâìÂ≠óÈÄüÂ∫¶
      }

      // Ëß¶ÂèëÂêÑÁßç‰∫ã‰ª∂Á°Æ‰øùÂÖºÂÆπÊÄß
      emailInput.dispatchEvent(new Event("change", { bubbles: true }));
      emailInput.dispatchEvent(new Event("blur", { bubbles: true }));

      log(`‚úÖ ÈÇÆÁÆ±Â°´ÂÜôÂÆåÊàê: ${currentEmail}`, "success");
      updateProgress(25);

      return true;
    } catch (error) {
      log(`‚ùå ÈÇÆÁÆ±Â°´ÂÜôÂ§±Ë¥•: ${error.message}`, "error");
      throw error;
    }
  };

  // Ê≠•È™§2: Ëá™Âä®ÁÇπÂáªÊèê‰∫§ÊåâÈíÆ
  const autoSubmitEmail = async () => {
    try {
      log("üîç Êü•ÊâæÊèê‰∫§ÊåâÈíÆ...", "info");
      await sleep(1000); // Á≠âÂæÖÈ°µÈù¢ÂìçÂ∫î

      const submitBtn = await waitForElement($.submitBtn, ELEMENT_WAIT_TIMEOUT);
      if (!submitBtn) {
        throw new Error("Êú™ÊâæÂà∞Êèê‰∫§ÊåâÈíÆ");
      }

      log("üéØ ÊâæÂà∞Êèê‰∫§ÊåâÈíÆÔºåÂáÜÂ§áÊèê‰∫§...", "success");
      debugLog(
        `Êèê‰∫§ÊåâÈíÆÂ±ûÊÄß: type="${
          submitBtn.type
        }", textContent="${submitBtn.textContent.trim()}"`
      );

      // Á°Æ‰øùÊåâÈíÆÂèØÁÇπÂáª
      if (submitBtn.disabled) {
        log("‚ö†Ô∏è ÊåâÈíÆË¢´Á¶ÅÁî®ÔºåÁ≠âÂæÖÂêØÁî®...", "warning");
        await sleep(2000);
      }

      submitBtn.click();
      log("‚úÖ ÈÇÆÁÆ±Â∑≤Êèê‰∫§ÔºåÁ≠âÂæÖÈ°µÈù¢Ë∑≥ËΩ¨...", "success");
      updateProgress(40);

      return true;
    } catch (error) {
      log(`‚ùå Êèê‰∫§Â§±Ë¥•: ${error.message}`, "error");
      throw error;
    }
  };

  // Ê≠•È™§3: Á≠âÂæÖÈ™åËØÅÁ†ÅÈ°µÈù¢Âπ∂Ëé∑ÂèñÈ™åËØÅÁ†Å
  const autoGetVerificationCode = async (skipPageWait = false) => {
    try {
      if (!skipPageWait) {
        log("‚è≥ Á≠âÂæÖÈ™åËØÅÁ†ÅÈ°µÈù¢Âä†ËΩΩ...", "info");
        await sleep(PAGE_TRANSITION_WAIT);
      }

      log("üîç Êü•ÊâæÈ™åËØÅÁ†ÅËæìÂÖ•Ê°Ü...", "info");
      const codeInput = await waitForElement($.code, ELEMENT_WAIT_TIMEOUT);
      if (!codeInput) {
        throw new Error("Êú™ÊâæÂà∞È™åËØÅÁ†ÅËæìÂÖ•Ê°ÜÔºåÂèØËÉΩÈ°µÈù¢Êú™Ë∑≥ËΩ¨");
      }

      log("‚úÖ È™åËØÅÁ†ÅÈ°µÈù¢Â∑≤Âä†ËΩΩ", "success");
      updateProgress(55);

      // Á≠âÂæÖÈÇÆ‰ª∂Âà∞Ëææ
      log(`‚è≥ Á≠âÂæÖ ${CODE_FETCH_DELAY / 1000} ÁßíËÆ©ÈÇÆ‰ª∂Âà∞Ëææ...`, "info");
      await sleep(CODE_FETCH_DELAY);
      updateProgress(65);

      let verificationCode = null;

      // Â§öÊ¨°Â∞ùËØïËé∑ÂèñÈ™åËØÅÁ†Å
      for (let attempt = 1; attempt <= MAX_RETRY_ATTEMPTS; attempt++) {
        try {
          log(`üîÑ Á¨¨ ${attempt} Ê¨°Â∞ùËØïËé∑ÂèñÈ™åËØÅÁ†Å...`, "info");
          verificationCode = await fetchVerificationCode(currentEmail);
          break;
        } catch (error) {
          log(`‚ùå Á¨¨ ${attempt} Ê¨°Ëé∑ÂèñÂ§±Ë¥•: ${error.message}`, "error");

          if (attempt < MAX_RETRY_ATTEMPTS) {
            log(`‚è≥ Á≠âÂæÖ ${RETRY_INTERVAL / 1000} ÁßíÂêéÈáçËØï...`, "info");
            await sleep(RETRY_INTERVAL);
          } else {
            throw new Error(`Â§öÊ¨°Â∞ùËØïÂêé‰ªçÊó†Ê≥ïËé∑ÂèñÈ™åËØÅÁ†Å: ${error.message}`);
          }
        }
      }

      if (!verificationCode) {
        throw new Error("Ëé∑ÂèñÈ™åËØÅÁ†ÅÂ§±Ë¥•");
      }

      updateProgress(80);
      return { codeInput, verificationCode };
    } catch (error) {
      log(`‚ùå È™åËØÅÁ†ÅËé∑ÂèñÂ§±Ë¥•: ${error.message}`, "error");
      throw error;
    }
  };

  // Ê≠•È™§4: Ëá™Âä®Â°´ÂÜôÈ™åËØÅÁ†ÅÂπ∂Êèê‰∫§
  const autoFillAndSubmitCode = async (codeInput, verificationCode) => {
    try {
      log(`üìù ÂºÄÂßãÂ°´ÂÜôÈ™åËØÅÁ†Å: ${verificationCode}`, "info");

      // Ê∏ÖÁ©∫Âπ∂Â°´ÂÜôÈ™åËØÅÁ†Å
      codeInput.value = "";
      codeInput.focus();
      await sleep(500);

      // Ê®°ÊãüÁúüÂÆûËæìÂÖ•È™åËØÅÁ†Å
      for (let i = 0; i < verificationCode.length; i++) {
        codeInput.value += verificationCode[i];
        codeInput.dispatchEvent(new Event("input", { bubbles: true }));
        await sleep(100); // Á®çÊÖ¢ÁöÑËæìÂÖ•ÈÄüÂ∫¶
      }

      // Ëß¶Âèë‰∫ã‰ª∂
      codeInput.dispatchEvent(new Event("change", { bubbles: true }));
      codeInput.dispatchEvent(new Event("blur", { bubbles: true }));

      log("‚úÖ È™åËØÅÁ†ÅÂ°´ÂÜôÂÆåÊàê", "success");
      await sleep(1000);

      // Êü•ÊâæÂπ∂ÁÇπÂáªÊèê‰∫§ÊåâÈíÆ
      log("üîç Êü•ÊâæÈ™åËØÅÁ†ÅÊèê‰∫§ÊåâÈíÆ...", "info");
      const submitBtn = await waitForElement($.submitBtn, ELEMENT_WAIT_TIMEOUT);
      if (!submitBtn) {
        throw new Error("Êú™ÊâæÂà∞È™åËØÅÁ†ÅÊèê‰∫§ÊåâÈíÆ");
      }

      log("üéØ Êèê‰∫§È™åËØÅÁ†Å...", "success");
      submitBtn.click();
      updateProgress(90);

      return true;
    } catch (error) {
      log(`‚ùå È™åËØÅÁ†ÅÊèê‰∫§Â§±Ë¥•: ${error.message}`, "error");
      throw error;
    }
  };

  // Ê≠•È™§5: Â§ÑÁêÜÊúçÂä°Êù°Ê¨æÈ°µÈù¢
  const autoHandleTerms = async () => {
    try {
      log("‚è≥ Ê£ÄÊü•ÊòØÂê¶ÊúâÊúçÂä°Êù°Ê¨æÈ°µÈù¢...", "info");
      await sleep(PAGE_TRANSITION_WAIT);

      const agreeCheckbox = await waitForElement($.agree, 3000); // ËæÉÁü≠ÁöÑÁ≠âÂæÖÊó∂Èó¥
      if (agreeCheckbox && !agreeCheckbox.checked) {
        log("‚òëÔ∏è ÊâæÂà∞ÊúçÂä°Êù°Ê¨æÔºåËá™Âä®ÂêåÊÑè...", "info");
        agreeCheckbox.click();
        await sleep(1000);

        // Êü•ÊâæÊúÄÁªàÊèê‰∫§ÊåâÈíÆ
        const finalSubmitBtn = await waitForElement(
          $.submitBtn,
          ELEMENT_WAIT_TIMEOUT
        );
        if (finalSubmitBtn) {
          log("üéØ Êèê‰∫§ÊúçÂä°Êù°Ê¨æ...", "success");
          finalSubmitBtn.click();
        }
      }

      updateProgress(100);
      return true;
    } catch (error) {
      // ÊúçÂä°Êù°Ê¨æÈ°µÈù¢ÊòØÂèØÈÄâÁöÑÔºå‰∏çÊäõÂá∫ÈîôËØØ
      log("‚ÑπÔ∏è Êú™ÂèëÁé∞ÊúçÂä°Êù°Ê¨æÈ°µÈù¢ÔºåÂèØËÉΩÂ∑≤ÂÆåÊàêÊ≥®ÂÜå", "info");
      updateProgress(100);
      return true;
    }
  };

  // ÁªßÁª≠È™åËØÅÁ†ÅÊµÅÁ®ãÔºà‰ªéÈ™åËØÅÁ†ÅÈ°µÈù¢ÂºÄÂßãÔºâ
  const continueVerificationCodeFlow = async () => {
    if (isProcessing) {
      log("‚ö†Ô∏è ÊµÅÁ®ãÊ≠£Âú®ËøõË°å‰∏≠ÔºåËØ∑ÂãøÈáçÂ§çÂêØÂä®", "warning");
      return;
    }

    isProcessing = true;
    const startBtn = document.getElementById("auto-start-btn");
    if (startBtn) {
      startBtn.disabled = true;
      startBtn.textContent = "Â§ÑÁêÜ‰∏≠...";
    }

    try {
      // Á°Æ‰øùÊúâÈÇÆÁÆ±Âú∞ÂùÄ
      if (!currentEmail) {
        currentEmail = generateEmail();
        updateEmailDisplay(currentEmail);
        log(`üìß ÁîüÊàêÈÇÆÁÆ±Âú∞ÂùÄ: ${currentEmail}`, "success");
      }

      log("üî¢ ‰ªéÈ™åËØÅÁ†ÅÈ°µÈù¢ÁªßÁª≠ÊµÅÁ®ã", "info");
      updateProgress(50);

      // Ê≠•È™§3: Ëé∑ÂèñÈ™åËØÅÁ†ÅÔºàË∑≥ËøáÈ°µÈù¢Á≠âÂæÖÔºåÂõ†‰∏∫Â∑≤ÁªèÂú®È™åËØÅÁ†ÅÈ°µÈù¢Ôºâ
      const { codeInput, verificationCode } = await autoGetVerificationCode(
        true
      );

      // Ê≠•È™§4: Â°´ÂÜôÂπ∂Êèê‰∫§È™åËØÅÁ†Å
      await autoFillAndSubmitCode(codeInput, verificationCode);

      // Ê≠•È™§5: Â§ÑÁêÜÊúçÂä°Êù°Ê¨æÔºàÂèØÈÄâÔºâ
      await autoHandleTerms();

      // ÂÆåÊàê
      log("üéâ Ê≥®ÂÜåÊµÅÁ®ãÂÆåÊàêÔºÅ", "success");
      updateStatus("üéâ", "Ê≥®ÂÜåÊµÅÁ®ãÂÆåÊàêÔºÅÊÅ≠ÂñúÊÇ®ÊàêÂäüÊ≥®ÂÜåÔºÅ", "success");
    } catch (error) {
      log(`‚ùå È™åËØÅÁ†ÅÊµÅÁ®ãÂ§±Ë¥•: ${error.message}`, "error");
      updateStatus("‚ùå", `È™åËØÅÁ†ÅÊµÅÁ®ãÂ§±Ë¥•: ${error.message}`, "error");
      showRetryButton();
    } finally {
      isProcessing = false;
      if (startBtn) {
        startBtn.disabled = false;
        startBtn.textContent = "ÂºÄÂßãÊ≥®ÂÜå";
      }
    }
  };

  // ÁªßÁª≠ÊúçÂä°Êù°Ê¨æÊµÅÁ®ãÔºà‰ªéÊúçÂä°Êù°Ê¨æÈ°µÈù¢ÂºÄÂßãÔºâ
  const continueTermsFlow = async () => {
    if (isProcessing) {
      log("‚ö†Ô∏è ÊµÅÁ®ãÊ≠£Âú®ËøõË°å‰∏≠ÔºåËØ∑ÂãøÈáçÂ§çÂêØÂä®", "warning");
      return;
    }

    isProcessing = true;
    const startBtn = document.getElementById("auto-start-btn");
    if (startBtn) {
      startBtn.disabled = true;
      startBtn.textContent = "Â§ÑÁêÜ‰∏≠...";
    }

    try {
      log("üìã ‰ªéÊúçÂä°Êù°Ê¨æÈ°µÈù¢ÁªßÁª≠ÊµÅÁ®ã", "info");
      updateProgress(90);

      // Ê≠•È™§5: Â§ÑÁêÜÊúçÂä°Êù°Ê¨æ
      await autoHandleTerms();

      // ÂÆåÊàê
      log("üéâ Ê≥®ÂÜåÊµÅÁ®ãÂÆåÊàêÔºÅ", "success");
      updateStatus("üéâ", "Ê≥®ÂÜåÊµÅÁ®ãÂÆåÊàêÔºÅÊÅ≠ÂñúÊÇ®ÊàêÂäüÊ≥®ÂÜåÔºÅ", "success");
    } catch (error) {
      log(`‚ùå ÊúçÂä°Êù°Ê¨æÊµÅÁ®ãÂ§±Ë¥•: ${error.message}`, "error");
      updateStatus("‚ùå", `ÊúçÂä°Êù°Ê¨æÊµÅÁ®ãÂ§±Ë¥•: ${error.message}`, "error");
      showRetryButton();
    } finally {
      isProcessing = false;
      if (startBtn) {
        startBtn.disabled = false;
        startBtn.textContent = "ÂºÄÂßãÊ≥®ÂÜå";
      }
    }
  };

  // ‰∏ªËá™Âä®ÂåñÊµÅÁ®ã
  const startAutoRegistration = async () => {
    if (isProcessing) {
      log("‚ö†Ô∏è Ê≥®ÂÜåÊµÅÁ®ãÊ≠£Âú®ËøõË°å‰∏≠ÔºåËØ∑ÂãøÈáçÂ§çÁÇπÂáª", "warning");
      return;
    }

    isProcessing = true;
    const startBtn = document.getElementById("auto-start-btn");
    if (startBtn) {
      startBtn.disabled = true;
      startBtn.textContent = "Â§ÑÁêÜ‰∏≠...";
    }

    try {
      // ÁîüÊàêÈÇÆÁÆ±ÔºàÂ¶ÇÊûúËøòÊ≤°ÊúâÔºâ
      if (!currentEmail) {
        currentEmail = generateEmail();
        updateEmailDisplay(currentEmail);
        log(`üìß ÁîüÊàêÈÇÆÁÆ±Âú∞ÂùÄ: ${currentEmail}`, "success");
      }

      updateProgress(5);
      log("üöÄ ÂºÄÂßãÂÖ®Ëá™Âä®Ê≥®ÂÜåÊµÅÁ®ã...", "info");

      // Ê≠•È™§1: Â°´ÂÜôÈÇÆÁÆ±
      await autoFillEmail();

      // Ê≠•È™§2: Êèê‰∫§ÈÇÆÁÆ±
      await autoSubmitEmail();

      // Ê≠•È™§3: Ëé∑ÂèñÈ™åËØÅÁ†Å
      const { codeInput, verificationCode } = await autoGetVerificationCode();

      // Ê≠•È™§4: Â°´ÂÜôÂπ∂Êèê‰∫§È™åËØÅÁ†Å
      await autoFillAndSubmitCode(codeInput, verificationCode);

      // Ê≠•È™§5: Â§ÑÁêÜÊúçÂä°Êù°Ê¨æÔºàÂèØÈÄâÔºâ
      await autoHandleTerms();

      // ÂÆåÊàê
      log("üéâ Ê≥®ÂÜåÊµÅÁ®ãÂÆåÊàêÔºÅ", "success");
      updateStatus("üéâ", "Ê≥®ÂÜåÊµÅÁ®ãÂÆåÊàêÔºÅÊÅ≠ÂñúÊÇ®ÊàêÂäüÊ≥®ÂÜåÔºÅ", "success");
    } catch (error) {
      log(`‚ùå Ëá™Âä®Ê≥®ÂÜåÂ§±Ë¥•: ${error.message}`, "error");
      updateStatus("‚ùå", `Ê≥®ÂÜåÂ§±Ë¥•: ${error.message}`, "error");
      showRetryButton();
    } finally {
      isProcessing = false;
      if (startBtn) {
        startBtn.disabled = false;
        startBtn.textContent = "ÂºÄÂßãÊ≥®ÂÜå";
      }
    }
  };

  /* ---- È°µÈù¢Ê£ÄÊµãÂíåÂàùÂßãÂåñ ---- */

  // Ê£ÄÊµãÈ°µÈù¢Á±ªÂûã
  const detectPageType = () => {
    const hasEmailInput = !!$.email();
    const hasCodeInput = !!$.code();
    const hasAgreeCheckbox = !!$.agree();

    if (hasEmailInput) {
      return "email";
    } else if (hasCodeInput) {
      return "code";
    } else if (hasAgreeCheckbox) {
      return "terms";
    } else {
      return "unknown";
    }
  };

  // Êô∫ËÉΩÈ°µÈù¢Ê£ÄÊµãÂíåËá™Âä®ÂêØÂä®
  const smartAutoStart = async () => {
    if (!autoMode) return;

    const pageType = detectPageType();

    if (pageType === "email") {
      log("ü§ñ Ê£ÄÊµãÂà∞ÈÇÆÁÆ±È°µÈù¢ÔºåËá™Âä®Ê®°ÂºèÂêØÂä®‰∏≠...", "info");
      await sleep(AUTO_START_DELAY);

      if (autoMode && !isProcessing) {
        log("üöÄ Ëá™Âä®Ê®°ÂºèÂêØÂä®Ê≥®ÂÜåÊµÅÁ®ã", "success");
        startAutoRegistration();
      }
    }
  };

  // ÂàùÂßãÂåñÂáΩÊï∞
  const init = () => {
    // Ê£ÄÊü•ÊòØÂê¶Âú®ÁõÆÊ†áÈ°µÈù¢
    const isTargetPage =
      window.location.href.includes("augmentcode.com") ||
      window.location.href.includes("login.augmentcode.com");

    if (!isTargetPage) {
      return;
    }

    log("üîç Ê£ÄÊµãÂà∞AugmentÈ°µÈù¢ÔºåÂàùÂßãÂåñÂÖ®Ëá™Âä®Ê≥®ÂÜåÂ∑•ÂÖ∑", "info");

    // ÂàõÂª∫Áä∂ÊÄÅÈù¢Êùø
    createStatusPanel();

    // ÁîüÊàêÈÇÆÁÆ±Âú∞ÂùÄÔºàÂè™ÁîüÊàê‰∏ÄÊ¨°Ôºâ
    if (!currentEmail) {
      currentEmail = generateEmail();
      updateEmailDisplay(currentEmail);
      log(`üìß ÁîüÊàêÈÇÆÁÆ±Âú∞ÂùÄ: ${currentEmail}`, "success");
    }

    // Ê£ÄÊµãÈ°µÈù¢Á±ªÂûãÂπ∂Êõ¥Êñ∞Áä∂ÊÄÅ
    const pageType = detectPageType();

    switch (pageType) {
      case "email":
        log("üìß Ê£ÄÊµãÂà∞ÈÇÆÁÆ±ËæìÂÖ•È°µÈù¢", "success");
        updateStatus("üìß", "Ê£ÄÊµãÂà∞ÈÇÆÁÆ±ËæìÂÖ•È°µÈù¢ÔºåÂáÜÂ§áÂºÄÂßãÊ≥®ÂÜå", "success");

        // Ëá™Âä®Ê®°Âºè‰∏ãÂª∂ËøüÂêØÂä®
        if (autoMode) {
          updateStatus(
            "ü§ñ",
            `Ëá™Âä®Ê®°ÂºèÂ∑≤ÂºÄÂêØÔºå${AUTO_START_DELAY / 1000}ÁßíÂêéËá™Âä®ÂºÄÂßã`,
            "info"
          );
          smartAutoStart();
        }
        break;

      case "code":
        log("üî¢ Ê£ÄÊµãÂà∞È™åËØÅÁ†ÅËæìÂÖ•È°µÈù¢ÔºåËá™Âä®ÁªßÁª≠ÊµÅÁ®ã", "success");
        updateStatus("üî¢", "Ê£ÄÊµãÂà∞È™åËØÅÁ†ÅËæìÂÖ•È°µÈù¢ÔºåËá™Âä®Ëé∑ÂèñÈ™åËØÅÁ†Å", "success");

        // Ëá™Âä®ÁªßÁª≠È™åËØÅÁ†ÅÊµÅÁ®ã
        setTimeout(async () => {
          if (!isProcessing) {
            log("ü§ñ Ëá™Âä®ÁªßÁª≠È™åËØÅÁ†ÅÊµÅÁ®ã", "info");
            await continueVerificationCodeFlow();
          }
        }, 1000);
        break;

      case "terms":
        log("üìã Ê£ÄÊµãÂà∞ÊúçÂä°Êù°Ê¨æÈ°µÈù¢ÔºåËá™Âä®Â§ÑÁêÜ", "success");
        updateStatus("üìã", "Ê£ÄÊµãÂà∞ÊúçÂä°Êù°Ê¨æÈ°µÈù¢ÔºåËá™Âä®ÂÆåÊàêÊ≥®ÂÜå", "success");

        // Ëá™Âä®Â§ÑÁêÜÊúçÂä°Êù°Ê¨æ
        setTimeout(async () => {
          if (!isProcessing) {
            log("ü§ñ Ëá™Âä®Â§ÑÁêÜÊúçÂä°Êù°Ê¨æ", "info");
            await continueTermsFlow();
          }
        }, 1000);
        break;

      default:
        log("‚è≥ Á≠âÂæÖÈ°µÈù¢Âä†ËΩΩÂÆåÊàê...", "info");
        updateStatus("‚è≥", "Á≠âÂæÖÈ°µÈù¢Âä†ËΩΩÂÆåÊàê...", "info");

        // ËÆæÁΩÆÈ°µÈù¢ÂèòÂåñÁõëÂê¨
        const observer = new MutationObserver(() => {
          const newPageType = detectPageType();
          if (newPageType !== "unknown") {
            observer.disconnect();
            log(`üîÑ È°µÈù¢Á±ªÂûãÂèòÂåñ‰∏∫: ${newPageType}`, "info");
            setTimeout(init, 1000); // ÈáçÊñ∞ÂàùÂßãÂåñ
          }
        });

        observer.observe(document.body, {
          childList: true,
          subtree: true,
        });

        // ÂÆöÊúüÊ£ÄÊü•È°µÈù¢ÂèòÂåñÔºàÂ§áÁî®Êú∫Âà∂Ôºâ
        const checkInterval = setInterval(() => {
          const newPageType = detectPageType();
          if (newPageType !== "unknown") {
            clearInterval(checkInterval);
            observer.disconnect();
            log(`üîÑ ÂÆöÊúüÊ£ÄÊü•ÂèëÁé∞È°µÈù¢Á±ªÂûã: ${newPageType}`, "info");
            setTimeout(init, 1000);
          }
        }, 2000);

        // 10ÁßíÂêéÂÅúÊ≠¢Ê£ÄÊü•
        setTimeout(() => {
          clearInterval(checkInterval);
          observer.disconnect();
          log("‚è∞ È°µÈù¢Ê£ÄÊü•Ë∂ÖÊó∂ÔºåÂÅúÊ≠¢ÁõëÂê¨", "info");
        }, 10000);
        break;
    }
  };

  // È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÂàùÂßãÂåñ
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", init);
  } else {
    // Âª∂ËøüÂàùÂßãÂåñÔºåÁ°Æ‰øùÈ°µÈù¢ÂÆåÂÖ®Âä†ËΩΩ
    setTimeout(init, 1000);
  }

  // ÁõëÂê¨È°µÈù¢ÂèòÂåñÔºàSPAÂ∫îÁî®Ôºâ
  let lastUrl = location.href;
  new MutationObserver(() => {
    const url = location.href;
    if (url !== lastUrl) {
      lastUrl = url;
      log("üîÑ Ê£ÄÊµãÂà∞È°µÈù¢ÂèòÂåñÔºåÈáçÊñ∞ÂàùÂßãÂåñ", "info");
      setTimeout(init, 2000); // È°µÈù¢ÂèòÂåñÂêéÈáçÊñ∞ÂàùÂßãÂåñ
    }
  }).observe(document, { subtree: true, childList: true });

  // ÈîÆÁõòÂø´Êç∑ÈîÆÊîØÊåÅ
  document.addEventListener("keydown", (e) => {
    // Ctrl+Shift+A Âø´ÈÄüÂêØÂä®
    if (e.ctrlKey && e.shiftKey && e.key === "A") {
      e.preventDefault();
      if (!isProcessing) {
        log("‚å®Ô∏è Âø´Êç∑ÈîÆÂêØÂä®Ê≥®ÂÜåÊµÅÁ®ã", "info");
        startAutoRegistration();
      }
    }

    // Ctrl+Shift+T ÂàáÊç¢Ëá™Âä®Ê®°Âºè
    if (e.ctrlKey && e.shiftKey && e.key === "T") {
      e.preventDefault();
      const toggle = document.getElementById("auto-mode-toggle");
      if (toggle) {
        toggle.click();
        log(`‚å®Ô∏è Âø´Êç∑ÈîÆÂàáÊç¢Ëá™Âä®Ê®°Âºè: ${autoMode ? "ÂºÄÂêØ" : "ÂÖ≥Èó≠"}`, "info");
      }
    }
  });

  // È°µÈù¢ÂèØËßÅÊÄßÂèòÂåñÁõëÂê¨
  document.addEventListener("visibilitychange", () => {
    if (document.visibilityState === "visible" && autoMode) {
      // È°µÈù¢ÈáçÊñ∞ÂèØËßÅÊó∂ÔºåÊ£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅÈáçÊñ∞ÂêØÂä®
      setTimeout(() => {
        const pageType = detectPageType();
        if (pageType === "email" && !isProcessing) {
          log("üëÅÔ∏è È°µÈù¢ÈáçÊñ∞ÂèØËßÅÔºåÊ£ÄÊü•Ëá™Âä®ÂêØÂä®Êù°‰ª∂", "info");
          smartAutoStart();
        }
      }, 1000);
    }
  });

  // ÂÖ®Â±ÄÈîôËØØÂ§ÑÁêÜ
  window.addEventListener("error", (e) => {
    log(`üí• ÂÖ®Â±ÄÈîôËØØ: ${e.message}`, "error");
    console.error("Augment Auto Registration Error:", e);
  });

  // ÂàùÂßãÂåñÂÆåÊàêÊèêÁ§∫
  log("üéØ Augment ÂÖ®Ëá™Âä®Ê≥®ÂÜåËÑöÊú¨Â∑≤Âä†ËΩΩ", "success");
  console.log("üöÄ Augment ÂÖ®Ëá™Âä®Ê≥®ÂÜåËÑöÊú¨ v7.0");
  console.log(
    "‚å®Ô∏è Âø´Êç∑ÈîÆ: Ctrl+Shift+A (ÂêØÂä®Ê≥®ÂÜå) | Ctrl+Shift+T (ÂàáÊç¢Ëá™Âä®Ê®°Âºè)"
  );
})();
